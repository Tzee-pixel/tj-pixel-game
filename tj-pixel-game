<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Fruit Collector Game</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.4.0/css/all.min.css">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Press+Start+2P:wght@400&display=swap');
        
        .pixel-font {
            font-family: 'Press Start 2P', cursive;
        }
        
        #gameCanvas {
            background-image: url('https://cdn1.genspark.ai/user-upload-image/gpt_image_generated/7b7c62c6-ce39-4616-a565-e0e76157fe03');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            border: 4px solid #4a5568;
            image-rendering: pixelated;
            image-rendering: -moz-crisp-edges;
            image-rendering: crisp-edges;
        }
        
        .game-button {
            background: linear-gradient(45deg, #4299e1, #3182ce);
            border: 3px solid #2b6cb0;
            color: white;
            font-weight: bold;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
        }
        
        .game-button:hover {
            background: linear-gradient(45deg, #3182ce, #2c5282);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        }
        
        .game-button:active {
            transform: translateY(0);
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }
        
        .pause-button {
            background: linear-gradient(45deg, #ed8936, #dd6b20);
            border: 3px solid #c05621;
        }
        
        .pause-button:hover {
            background: linear-gradient(45deg, #dd6b20, #c05621);
        }
        
        .exit-button {
            background: linear-gradient(45deg, #e53e3e, #c53030);
            border: 3px solid #9c2b2b;
        }
        
        .exit-button:hover {
            background: linear-gradient(45deg, #c53030, #a0282b);
        }
        
        .score-display {
            background: rgba(0,0,0,0.8);
            color: white;
            padding: 8px 16px;
            border-radius: 8px;
            border: 2px solid #4a5568;
        }
        
        .modal {
            background: rgba(0,0,0,0.9);
            backdrop-filter: blur(5px);
        }
        
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        
        .pixel-art {
            image-rendering: pixelated;
            image-rendering: -moz-crisp-edges;
            image-rendering: crisp-edges;
        }
    </style>
</head>
<body class="bg-gradient-to-br from-blue-400 to-purple-600 min-h-screen flex items-center justify-center">
    <!-- Main Container -->
    <div class="w-full max-w-4xl mx-auto p-4">
        <!-- Menu Screen -->
        <div id="menuScreen" class="text-center">
            <div class="bg-white bg-opacity-90 rounded-lg p-8 shadow-2xl">
                <h1 class="pixel-font text-4xl md:text-6xl text-purple-800 mb-8">
                    <i class="fas fa-apple-alt text-red-500"></i>
                    Fruit Collector
                </h1>
                <p class="text-lg text-gray-700 mb-8">Collect falling fruits and score points!</p>
                <div class="space-y-4">
                    <button onclick="startGame()" class="game-button pixel-font text-lg">
                        <i class="fas fa-play mr-2"></i>Start Game
                    </button>
                    <button onclick="showInstructions()" class="game-button pixel-font text-lg">
                        <i class="fas fa-question-circle mr-2"></i>Instructions
                    </button>
                </div>
                <div class="mt-6 text-sm text-gray-600">
                    <p><i class="fas fa-trophy text-yellow-500"></i> High Score: <span id="highScoreDisplay">0</span></p>
                </div>
            </div>
        </div>

        <!-- Game Screen -->
        <div id="gameScreen" class="hidden">
            <div class="bg-white bg-opacity-95 rounded-lg p-4 shadow-2xl">
                <!-- Game UI -->
                <div class="flex justify-between items-center mb-4">
                    <div class="flex space-x-4">
                        <div class="score-display pixel-font text-sm">
                            <i class="fas fa-star text-yellow-400"></i> Score: <span id="score">0</span>
                        </div>
                        <div class="score-display pixel-font text-sm">
                            <i class="fas fa-heart text-red-500"></i> Lives: <span id="lives">3</span>
                        </div>
                    </div>
                    <div class="flex space-x-2">
                        <button onclick="pauseGame()" class="pause-button pixel-font text-sm px-3 py-2">
                            <i class="fas fa-pause"></i>
                        </button>
                        <button onclick="exitGame()" class="exit-button pixel-font text-sm px-3 py-2">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
                
                <!-- Game Canvas -->
                <canvas id="gameCanvas" width="800" height="500" class="w-full max-w-full border-4 border-gray-600 rounded-lg"></canvas>
                
                <!-- Mobile Controls -->
                <div class="md:hidden mt-4 flex justify-center space-x-4">
                    <button id="leftBtn" class="game-button text-2xl px-4 py-2">
                        <i class="fas fa-arrow-left"></i>
                    </button>
                    <button id="jumpBtn" class="game-button text-2xl px-6 py-2">
                        <i class="fas fa-arrow-up"></i>
                    </button>
                    <button id="rightBtn" class="game-button text-2xl px-4 py-2">
                        <i class="fas fa-arrow-right"></i>
                    </button>
                </div>
            </div>
        </div>

        <!-- Instructions Modal -->
        <div id="instructionsModal" class="modal fixed inset-0 flex items-center justify-center hidden z-50">
            <div class="bg-white rounded-lg p-8 max-w-md mx-4 shadow-2xl">
                <h2 class="pixel-font text-2xl text-purple-800 mb-4 text-center">
                    <i class="fas fa-gamepad mr-2"></i>How to Play
                </h2>
                <div class="space-y-3 text-gray-700">
                    <p><i class="fas fa-arrow-left text-blue-500"></i><i class="fas fa-arrow-right text-blue-500"></i> <strong>Arrow Keys:</strong> Move left/right</p>
                    <p><i class="fas fa-arrow-up text-green-500"></i> <strong>Spacebar:</strong> Jump</p>
                    <p><i class="fas fa-apple-alt text-red-500"></i> <strong>Red Apple:</strong> 10 points</p>
                    <p><i class="fas fa-apple-alt text-green-500"></i> <strong>Green Apple:</strong> 15 points</p>
                    <p><i class="fas fa-apple-alt text-yellow-500"></i> <strong>Yellow Apple:</strong> 25 points</p>
                    <p><i class="fas fa-heart text-red-500"></i> <strong>Lives:</strong> Lose one when apple hits ground</p>
                    <p><i class="fas fa-plus text-green-600"></i> <strong>Life Recovery:</strong> Gain 1 life every 100 points</p>
                    <p><i class="fas fa-bolt text-purple-500"></i> <strong>Difficulty:</strong> Gets faster over time!</p>
                </div>
                <button onclick="hideInstructions()" class="game-button pixel-font text-sm mt-6 w-full">
                    <i class="fas fa-check mr-2"></i>Got it!
                </button>
            </div>
        </div>

        <!-- Game Over Modal -->
        <div id="gameOverModal" class="modal fixed inset-0 flex items-center justify-center hidden z-50">
            <div class="bg-white rounded-lg p-8 max-w-md mx-4 shadow-2xl text-center">
                <h2 class="pixel-font text-3xl text-red-600 mb-4">
                    <i class="fas fa-skull text-red-500"></i> Game Over!
                </h2>
                <div class="text-xl text-gray-700 mb-4">
                    <p>Final Score: <span id="finalScore" class="font-bold text-purple-600">0</span></p>
                    <p id="newHighScore" class="text-yellow-600 font-bold hidden">
                        <i class="fas fa-trophy"></i> New High Score!
                    </p>
                </div>
                <div class="space-y-3">
                    <button onclick="restartGame()" class="game-button pixel-font text-lg w-full">
                        <i class="fas fa-redo mr-2"></i>Play Again
                    </button>
                    <button onclick="backToMenu()" class="game-button pixel-font text-lg w-full">
                        <i class="fas fa-home mr-2"></i>Main Menu
                    </button>
                </div>
            </div>
        </div>

        <!-- Pause Modal -->
        <div id="pauseModal" class="modal fixed inset-0 flex items-center justify-center hidden z-50">
            <div class="bg-white rounded-lg p-8 max-w-md mx-4 shadow-2xl text-center">
                <h2 class="pixel-font text-2xl text-purple-800 mb-6">
                    <i class="fas fa-pause mr-2"></i>Game Paused
                </h2>
                <div class="space-y-3">
                    <button onclick="resumeGame()" class="game-button pixel-font text-lg w-full">
                        <i class="fas fa-play mr-2"></i>Resume
                    </button>
                    <button onclick="backToMenu()" class="game-button pixel-font text-lg w-full">
                        <i class="fas fa-home mr-2"></i>Main Menu
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Game variables
        let canvas, ctx;
        let gameState = 'menu'; // menu, playing, paused, gameOver
        let score = 0;
        let lives = 5;
        let gameSpeed = 0.2;
        let highScore = localStorage.getItem('fruitCollectorHighScore') || 0;
        let pointsForNextLife = 0;
        const POINTS_NEEDED_FOR_LIFE = 100;
        
        // Game objects
        let player = {
            x: 400,
            y: 350,
            width: 80,
            height: 80,
            velocityX: 0,
            velocityY: 0,
            isJumping: false,
            isMoving: false,
            direction: 'right',
            groundY: 320,
            speed: 5
        };
        
        let apples = [];
        let particles = [];
        
        // Images
        let walkingImg = new Image();
        let jumpingImg = new Image();
        let redAppleImg = new Image();
        let greenAppleImg = new Image();
        let yellowAppleImg = new Image();
        
        // Load images
        walkingImg.src = 'https://raw.githubusercontent.com/Tzee-pixel/tj-pixel-game/806809cbd1ef39a7bfb5bad70098be50cf5995e1/me-pixel.gif';
        jumpingImg.src = 'https://raw.githubusercontent.com/Tzee-pixel/tj-pixel-game/806809cbd1ef39a7bfb5bad70098be50cf5995e1/me-jumping.gif';
        redAppleImg.src = 'https://raw.githubusercontent.com/Tzee-pixel/tj-pixel-game/806809cbd1ef39a7bfb5bad70098be50cf5995e1/red-apple.png';
        greenAppleImg.src = 'https://raw.githubusercontent.com/Tzee-pixel/tj-pixel-game/806809cbd1ef39a7bfb5bad70098be50cf5995e1/green-apple.png';
        yellowAppleImg.src = 'https://raw.githubusercontent.com/Tzee-pixel/tj-pixel-game/806809cbd1ef39a7bfb5bad70098be50cf5995e1/yellow-apple.png';
        
        // Input handling
        let keys = {};
        
        // Initialize game
        function init() {
            canvas = document.getElementById('gameCanvas');
            ctx = canvas.getContext('2d');
            
            // Set canvas size
            resizeCanvas();
            window.addEventListener('resize', resizeCanvas);
            
            // Input event listeners
            document.addEventListener('keydown', (e) => {
                keys[e.code] = true;
                if (e.code === 'Space') {
                    e.preventDefault();
                }
            });
            
            document.addEventListener('keyup', (e) => {
                keys[e.code] = false;
            });
            
            // Mobile controls
            document.getElementById('leftBtn').addEventListener('touchstart', () => keys['ArrowLeft'] = true);
            document.getElementById('leftBtn').addEventListener('touchend', () => keys['ArrowLeft'] = false);
            document.getElementById('rightBtn').addEventListener('touchstart', () => keys['ArrowRight'] = true);
            document.getElementById('rightBtn').addEventListener('touchend', () => keys['ArrowRight'] = false);
            document.getElementById('jumpBtn').addEventListener('touchstart', () => keys['Space'] = true);
            document.getElementById('jumpBtn').addEventListener('touchend', () => keys['Space'] = false);
            
            // Prevent default touch behavior
            ['leftBtn', 'rightBtn', 'jumpBtn'].forEach(id => {
                document.getElementById(id).addEventListener('touchstart', (e) => e.preventDefault());
            });
            
            // Update high score display
            document.getElementById('highScoreDisplay').textContent = highScore;
            
            // Start game loop
            gameLoop();
        }
        
        function resizeCanvas() {
            const container = canvas.parentElement;
            const maxWidth = Math.min(800, container.clientWidth - 40);
            const maxHeight = Math.min(500, maxWidth * 0.625);
            
            canvas.style.width = maxWidth + 'px';
            canvas.style.height = maxHeight + 'px';
        }
        
        // Game state functions
        function startGame() {
            gameState = 'playing';
            score = 0;
            lives = 5;
            gameSpeed = 0.2;
            pointsForNextLife = 0;
            apples = [];
            particles = [];
            
            // Reset player
            player.x = 400;
            player.y = player.groundY;
            player.velocityX = 0;
            player.velocityY = 0;
            player.isJumping = false;
            player.isMoving = false;
            
            // Show game screen
            document.getElementById('menuScreen').classList.add('hidden');
            document.getElementById('gameScreen').classList.remove('hidden');
            
            updateUI();
        }
        
        function pauseGame() {
            if (gameState === 'playing') {
                gameState = 'paused';
                document.getElementById('pauseModal').classList.remove('hidden');
            }
        }
        
        function resumeGame() {
            gameState = 'playing';
            document.getElementById('pauseModal').classList.add('hidden');
        }
        
        function exitGame() {
            backToMenu();
        }
        
        function backToMenu() {
            gameState = 'menu';
            document.getElementById('gameScreen').classList.add('hidden');
            document.getElementById('menuScreen').classList.remove('hidden');
            document.getElementById('pauseModal').classList.add('hidden');
            document.getElementById('gameOverModal').classList.add('hidden');
        }
        
        function restartGame() {
            document.getElementById('gameOverModal').classList.add('hidden');
            startGame();
        }
        
        function gameOver() {
            gameState = 'gameOver';
            
            // Check for high score
            if (score > highScore) {
                highScore = score;
                localStorage.setItem('fruitCollectorHighScore', highScore);
                document.getElementById('newHighScore').classList.remove('hidden');
                document.getElementById('highScoreDisplay').textContent = highScore;
            } else {
                document.getElementById('newHighScore').classList.add('hidden');
            }
            
            document.getElementById('finalScore').textContent = score;
            document.getElementById('gameOverModal').classList.remove('hidden');
        }
        
        function showInstructions() {
            document.getElementById('instructionsModal').classList.remove('hidden');
        }
        
        function hideInstructions() {
            document.getElementById('instructionsModal').classList.add('hidden');
        }
        
        function updateScore(points) {
            score += points;
            pointsForNextLife += points;
            
            // Check if player earned a life
            if (pointsForNextLife >= POINTS_NEEDED_FOR_LIFE) {
                lives++;
                pointsForNextLife -= POINTS_NEEDED_FOR_LIFE;
                showLifeGainedEffect();
            }
            
            updateUI();
        }
        
        function showLifeGainedEffect() {
            const lifeText = document.createElement('div');
            lifeText.textContent = '+1 LIFE!';
            lifeText.style.cssText = `
                position: absolute;
                top: 50%;
                left: 50%;
                color: #00ff00;
                font-size: 24px;
                font-weight: bold;
                z-index: 1000;
                pointer-events: none;
                transform: translate(-50%, -50%);
                font-family: 'Press Start 2P', cursive;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
            `;
            
            document.body.appendChild(lifeText);
            
            setTimeout(() => {
                lifeText.remove();
            }, 2000);
        }
        
        // Game logic
        function update() {
            if (gameState !== 'playing') return;
            
            // Update player
            updatePlayer();
            
            // Update apples
            updateApples();
            
            // Update particles
            updateParticles();
            
            // Spawn apples
            spawnApples();
            
            // Check collisions
            checkCollisions();
            
            // Increase difficulty
            gameSpeed += 0.0001;
            
            updateUI();
        }
        
        function updatePlayer() {
            // Handle input
            player.isMoving = false;
            
            if (keys['ArrowLeft']) {
                player.velocityX = -player.speed;
                player.direction = 'left';
                player.isMoving = true;
            } else if (keys['ArrowRight']) {
                player.velocityX = player.speed;
                player.direction = 'right';
                player.isMoving = true;
            } else {
                player.velocityX *= 0.8; // Friction
            }
            
            if (keys['Space'] && !player.isJumping) {
                player.velocityY = -15;
                player.isJumping = true;
            }
            
            // Apply gravity
            if (player.isJumping) {
                player.velocityY += 0.8;
            }
            
            // Update position
            player.x += player.velocityX;
            player.y += player.velocityY;
            
            // Boundary checking
            if (player.x < 0) player.x = 0;
            if (player.x > canvas.width - player.width) player.x = canvas.width - player.width;
            
            // Ground collision
            if (player.y >= player.groundY) {
                player.y = player.groundY;
                player.velocityY = 0;
                player.isJumping = false;
            }
        }
        
        function updateApples() {
            apples.forEach((apple, index) => {
                apple.y += apple.speed * gameSpeed;
                apple.rotation += 0.1;
                
                // Remove apples that hit the ground
                if (apple.y > canvas.height - 50) {
                    apples.splice(index, 1);
                    lives--;
                    
                    // Create miss particle effect
                    createParticles(apple.x, apple.y, 'red');
                    
                    if (lives <= 0) {
                        gameOver();
                    }
                }
            });
        }
        
        function updateParticles() {
            particles.forEach((particle, index) => {
                particle.x += particle.vx;
                particle.y += particle.vy;
                particle.vy += 0.1;
                particle.life--;
                
                if (particle.life <= 0) {
                    particles.splice(index, 1);
                }
            });
        }
        
        function spawnApples() {
            if (Math.random() < 0.02 * gameSpeed) {
                let appleType = 'red';
                let points = 10;
                
                // Determine apple type based on rarity
                const rand = Math.random();
                if (rand < 0.1) {
                    appleType = 'yellow';
                    points = 25;
                } else if (rand < 0.3) {
                    appleType = 'green';
                    points = 15;
                }
                
                apples.push({
                    x: Math.random() * (canvas.width - 50),
                    y: -50,
                    width: 50,
                    height: 50,
                    speed: 2 + Math.random() * 2,
                    type: appleType,
                    points: points,
                    rotation: 0
                });
            }
        }
        
        function checkCollisions() {
            apples.forEach((apple, index) => {
                if (player.x < apple.x + apple.width &&
                    player.x + player.width > apple.x &&
                    player.y < apple.y + apple.height &&
                    player.y + player.height > apple.y) {
                    
                    // Collect apple
                    updateScore(apple.points);
                    apples.splice(index, 1);
                    
                    // Create collection particle effect
                    createParticles(apple.x + apple.width/2, apple.y + apple.height/2, 'gold');
                }
            });
        }
        
        function createParticles(x, y, color) {
            for (let i = 0; i < 10; i++) {
                particles.push({
                    x: x,
                    y: y,
                    vx: (Math.random() - 0.5) * 10,
                    vy: (Math.random() - 0.5) * 10,
                    life: 30,
                    color: color
                });
            }
        }
        
        // Rendering
        function render() {
            if (gameState !== 'playing') return;
            
            // Clear canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Draw player
            drawPlayer();
            
            // Draw apples
            drawApples();
            
            // Draw particles
            drawParticles();
        }
        
        function drawPlayer() {
            ctx.save();
            
            // Flip sprite if moving left
            if (player.direction === 'left') {
                ctx.scale(-1, 1);
                ctx.translate(-player.x * 2 - player.width, 0);
            }
            
            // Draw appropriate sprite
            const img = player.isJumping ? jumpingImg : (player.isMoving ? walkingImg : walkingImg);
            
            try {
                ctx.drawImage(img, player.x, player.y, player.width, player.height);
            } catch (e) {
                // Fallback rectangle if image not loaded
                ctx.fillStyle = '#4ade80';
                ctx.fillRect(player.x, player.y, player.width, player.height);
            }
            
            ctx.restore();
        }
        
        function drawApples() {
            apples.forEach(apple => {
                ctx.save();
                ctx.translate(apple.x + apple.width/2, apple.y + apple.height/2);
                ctx.rotate(apple.rotation);
                
                let img;
                switch (apple.type) {
                    case 'red': img = redAppleImg; break;
                    case 'green': img = greenAppleImg; break;
                    case 'yellow': img = yellowAppleImg; break;
                }
                
                try {
                    ctx.drawImage(img, -apple.width/2, -apple.height/2, apple.width, apple.height);
                } catch (e) {
                    // Fallback colored circle
                    ctx.fillStyle = apple.type === 'red' ? '#ef4444' : 
                                   apple.type === 'green' ? '#10b981' : '#f59e0b';
                    ctx.beginPath();
                    ctx.arc(0, 0, apple.width/2, 0, Math.PI * 2);
                    ctx.fill();
                }
                
                ctx.restore();
            });
        }
        
        function drawParticles() {
            particles.forEach(particle => {
                ctx.save();
                ctx.globalAlpha = particle.life / 30;
                ctx.fillStyle = particle.color === 'gold' ? '#fbbf24' : '#ef4444';
                ctx.fillRect(particle.x, particle.y, 4, 4);
                ctx.restore();
            });
        }
        
        function updateUI() {
            document.getElementById('score').textContent = score;
            document.getElementById('lives').textContent = lives;
        }
        
        // Game loop
        function gameLoop() {
            update();
            render();
            requestAnimationFrame(gameLoop);
        }
        
        // Initialize game when page loads
        window.addEventListener('load', init);
    </script>
</body>
</html>
    <script id="html_badge_script1">
        window.__genspark_remove_badge_link = "https://www.genspark.ai/api/html_badge/" +
            "remove_badge?token=To%2FBnjzloZ3UfQdcSaYfDvvKF3Ao0f%2BQPuJ3iQhvptg6MYMokTxy8Myv0wIxGUrRqZUPyhyM5cHclh7YNLpqAsQs%2BQiNuaONfXqNSfPYmpNXDSDNOJ6BdGCrKkg9mu6Ns3prJ%2FZQVfj%2BAJNq%2BDT5%2F9z8bScVZn8GpHaEhb%2BxbGwlhaCcfPm1%2FOfyGS69cj6KZhEsR5u%2F4LcDtWwtrNX93odDOUtH4gj2snXYPPNGso0v1PEXu4eLklWCwqr7lZoSpA7%2FoTTFDzvuaPrbZUzLjhpWo6P1B2FfqYVcHOun3izGEk3GGO6GRJBku1h37%2BtkxrGOmnvj4SrGkaD0re2fb3oQ5OqXNcX0WVteeOOQAtD1pO%2BCV1ssYcEzfccQ6SVgOJ4YaGDlGleQW5UTePcpL8AZlFAFPlB3SGDFndlKvHW6Erh6iMrZa76PKA4kB5IolJ1oN0GwvHGnRygrQUHt70qudn%2B0KFgQPpPxNrZR1%2FDAENc8s3MKfZnZ2xo6ZdD1iwcXt6UojeVkTu%2BP3aQ5qZ%2FY00jvNGoGzJEozKRPZ%2FI%3D";
        window.__genspark_locale = "en-US";
        window.__genspark_token = "To/BnjzloZ3UfQdcSaYfDvvKF3Ao0f+QPuJ3iQhvptg6MYMokTxy8Myv0wIxGUrRqZUPyhyM5cHclh7YNLpqAsQs+QiNuaONfXqNSfPYmpNXDSDNOJ6BdGCrKkg9mu6Ns3prJ/ZQVfj+AJNq+DT5/9z8bScVZn8GpHaEhb+xbGwlhaCcfPm1/OfyGS69cj6KZhEsR5u/4LcDtWwtrNX93odDOUtH4gj2snXYPPNGso0v1PEXu4eLklWCwqr7lZoSpA7/oTTFDzvuaPrbZUzLjhpWo6P1B2FfqYVcHOun3izGEk3GGO6GRJBku1h37+tkxrGOmnvj4SrGkaD0re2fb3oQ5OqXNcX0WVteeOOQAtD1pO+CV1ssYcEzfccQ6SVgOJ4YaGDlGleQW5UTePcpL8AZlFAFPlB3SGDFndlKvHW6Erh6iMrZa76PKA4kB5IolJ1oN0GwvHGnRygrQUHt70qudn+0KFgQPpPxNrZR1/DAENc8s3MKfZnZ2xo6ZdD1iwcXt6UojeVkTu+P3aQ5qZ/Y00jvNGoGzJEozKRPZ/I=";
    </script>
    
    <script id="html_notice_dialog_script" src="https://www.genspark.ai/notice_dialog.js"></script>
    
